"use strict";(self.webpackChunkjalapeno_api_gateway_documentation=self.webpackChunkjalapeno_api_gateway_documentation||[]).push([[954],{3873:function(e,t,o){o.d(t,{Z:function(){return s}});var n=o(7294),a=o(6010),r="tableOfContentsInline_3fWc";function i(e){var t=e.toc,o=e.isChild;return t.length?n.createElement("ul",{className:o?"":"table-of-contents"},t.map((function(e){return n.createElement("li",{key:e.id},n.createElement("a",{href:"#"+e.id,dangerouslySetInnerHTML:{__html:e.value}}),n.createElement(i,{isChild:!0,toc:e.children}))}))):null}var s=function(e){var t=e.toc;return n.createElement("div",{className:(0,a.Z)(r)},n.createElement(i,{toc:t}))}},3180:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return m},toc:function(){return c},default:function(){return u}});var n=o(7462),a=o(3366),r=(o(7294),o(3905)),i=o(3873),s=["components"],p={sidebar_position:2,title:"Design Choices"},l=void 0,m={unversionedId:"design/design-choices",id:"design/design-choices",isDocsHomePage:!1,title:"Design Choices",description:"Why use proto2 instead of proto3?",source:"@site/docs/design/design-choices.md",sourceDirName:"design",slug:"/design/design-choices",permalink:"/jagw-docs/docs/design/design-choices",editUrl:"https://github.com/jalapeno-api-gateway/docs/design/design-choices.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Design Choices"},sidebar:"tutorialSidebar",previous:{title:"Concept",permalink:"/jagw-docs/docs/design/concept"},next:{title:"Installation",permalink:"/jagw-docs/docs/installation"}},c=[{value:"Why use proto2 instead of proto3?",id:"why-use-proto2-instead-of-proto3",children:[{value:"Problem",id:"problem",children:[]},{value:"Solution",id:"solution",children:[]},{value:"But isn&#39;t proto2 going to be deprecated soon?",id:"but-isnt-proto2-going-to-be-deprecated-soon",children:[]}]}],d={toc:c};function u(e){var t=e.components,o=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(i.Z,{toc:c,mdxType:"TOCInline"}),(0,r.kt)("h2",{id:"why-use-proto2-instead-of-proto3"},"Why use ",(0,r.kt)("a",{parentName:"h2",href:"https://developers.google.com/protocol-buffers/docs/proto"},"proto2")," instead of ",(0,r.kt)("a",{parentName:"h2",href:"https://developers.google.com/protocol-buffers/docs/proto3"},"proto3"),"?"),(0,r.kt)("p",null,"The reason for choosing ",(0,r.kt)("em",{parentName:"p"},"proto2")," over ",(0,r.kt)("em",{parentName:"p"},"proto3")," is that ",(0,r.kt)("em",{parentName:"p"},"proto3")," dropped the support for ",(0,r.kt)("a",{parentName:"p",href:"https://cloud.google.com/apis/design/proto3"},(0,r.kt)("strong",{parentName:"a"},(0,r.kt)("em",{parentName:"strong"},"field presence"))),"."),(0,r.kt)("h3",{id:"problem"},"Problem"),(0,r.kt)("p",null,"In ",(0,r.kt)("em",{parentName:"p"},"proto3")," technically speaking all fields are automatically ",(0,r.kt)("em",{parentName:"p"},"optional"),", in the sense that the sender does not ",(0,r.kt)("em",{parentName:"p"},"have")," to set them. The problem is, that the receiver has no way of distinguishing between a field that has ",(0,r.kt)("em",{parentName:"p"},"not")," been set by the sender and a field that the sender has set ",(0,r.kt)("em",{parentName:"p"},"explicitly")," to its default value."),(0,r.kt)("p",null,"For example, consider the ",(0,r.kt)("em",{parentName:"p"},"DataRate")," property in ",(0,r.kt)("em",{parentName:"p"},"proto3"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},'syntax = "proto3";\n\nmessage TelemetryData {\n    ...\n    int64 dataRate = 2;\n    ...\n}\n')),(0,r.kt)("p",null,"In a ",(0,r.kt)("em",{parentName:"p"},"TelemetryData")," message with the value for ",(0,r.kt)("em",{parentName:"p"},"DataRate")," set to ",(0,r.kt)("em",{parentName:"p"},"0"),", there are two possible scenarios:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"No information on the ",(0,r.kt)("em",{parentName:"li"},"DataRate")," is available."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("em",{parentName:"li"},"DataRate")," is ",(0,r.kt)("em",{parentName:"li"},"0"),".")),(0,r.kt)("p",null,"In certain situations it may be important for a receiver to know the difference."),(0,r.kt)("h3",{id:"solution"},"Solution"),(0,r.kt)("p",null,"The solution is to use ",(0,r.kt)("em",{parentName:"p"},"proto2"),". ",(0,r.kt)("em",{parentName:"p"},"Proto2")," allows to make fields ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"nullable")),", using the keyword ",(0,r.kt)("em",{parentName:"p"},"optional"),". It achieves this by using pointers for all fields, even for primitive values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},'syntax = "proto2";\n\nmessage TelemetryData {\n    ...\n    optional int64 dataRate = 2;\n    ...\n}\n')),(0,r.kt)("p",null,"This way, when the ",(0,r.kt)("em",{parentName:"p"},"DataRate")," is set explicitly to ",(0,r.kt)("em",{parentName:"p"},"0"),", the field points to the value ",(0,r.kt)("em",{parentName:"p"},"0"),". But if the ",(0,r.kt)("em",{parentName:"p"},"DataRate")," is not set, the point is ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"<nil>")),"."),(0,r.kt)("p",null,"For more detail see this thread on ",(0,r.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/42634681"},"Stackoverflow"),"."),(0,r.kt)("h3",{id:"but-isnt-proto2-going-to-be-deprecated-soon"},"But isn't proto2 going to be deprecated soon?"),(0,r.kt)("p",null,"Google has no intentions of deprecating ",(0,r.kt)("em",{parentName:"p"},"proto2")," but is maintaining both versions simultaneously (see ",(0,r.kt)("a",{parentName:"p",href:"https://groups.google.com/g/protobuf/c/h-nwPLb42ac"},"here"),")."),(0,r.kt)("p",null,"It is therefore safe to use ",(0,r.kt)("em",{parentName:"p"},"proto2")," instead of ",(0,r.kt)("em",{parentName:"p"},"proto3"),"."))}u.isMDXComponent=!0}}]);